---
import { getCollection } from "astro:content";

const themes = await getCollection("theme");
---

<script define:vars={{ themes }}>
  function findThemeDefinition(item) {
      return themes.find((t) => t.id === item).data;
  }

  let item = window.localStorage.getItem("theme")

  let themeDefinition = findThemeDefinition(item);

  if (item && !themeDefinition) {
    window.localStorage.setItem("theme", "default");
    console.log("issue: style: theme not found; set to default");
  }

  const themeValue = themeDefinition
  let theme = window.matchMedia("(prefers-color-scheme: dark)").matches
    ? themeValue.dark
    : themeValue.light;

  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", (e) => {
      const newTheme = findThemeDefinition(
        window.localStorage.getItem("theme")
      );

      theme = e.matches ? newTheme.dark : newTheme.light;
      switchTheme(theme, newTheme);

      console.log("style: polarity switched to:", e.matches ? "dark" : "light");
    });

  function switchTheme(theme, themeBase) {
    document.documentElement.style.setProperty(
      "--primary-color",
      theme.primary
    );
    document.documentElement.style.setProperty(
      "--secondary-color",
      theme.secondary
    );
    document.documentElement.style.setProperty(
      "--background-color",
      theme.background
    );
    document.documentElement.style.setProperty(
      "--tertiary-color",
      theme.tertiary
    );

    document
      .querySelector("meta[name=theme-color]")
      .setAttribute("content", theme.background);

    document.querySelectorAll(".theme").forEach((link) => {
      const name = findThemeDefinition(link.id).id.slice(0, 1);

      if (link.id !== themeBase.id) {
        link.classList.remove("active");
        link.textContent = `○ ${name}`;
      } else {
        link.classList.add("active");
        link.textContent = `● ${name}`;
      }
    });
  }

  switchTheme(theme, themeValue);
</script>
