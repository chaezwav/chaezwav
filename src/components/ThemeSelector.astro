---
import { getCollection } from "astro:content";

const themes = await getCollection("theme");
---

<div class="themes">
  <a></a>
  {
    themes.map((theme) => (
      <a href="#" class="theme" id={theme.id}>
        {theme.id.slice(0, 1)}
      </a>
    ))
  }
  <a></a>
</div>

<script define:vars={{ themes }}>
  const links = document.querySelectorAll(".theme");

  function findThemeDefinition(item) {
    return themes.find((t) => t.id === item).data;
  }

  function switchTheme(theme) {
    const themeValue = window.matchMedia("(prefers-color-scheme: dark)").matches
      ? theme.dark
      : theme.light;

    document.documentElement.style.setProperty(
      "--primary-color",
      themeValue.primary
    );
    document.documentElement.style.setProperty(
      "--secondary-color",
      themeValue.secondary
    );
    document.documentElement.style.setProperty(
      "--background-color",
      themeValue.background
    );
    document.documentElement.style.setProperty(
      "--tertiary-color",
      themeValue.tertiary
    );

    document
      .querySelector("meta[name=theme-color]")
      .setAttribute("content", themeValue.background);

    console.log("style: theme switched to: ", theme.id);
  }

  for (const link of links) {
    const themeValue = themes.find((theme) => theme.id === link.id);
    link.addEventListener("click", (event) => {
      event.preventDefault();
      window.localStorage.setItem("theme", themeValue.id);

      link.classList.toggle("active");

      links.forEach((l) => {
        if (l !== link) {
          l.classList.remove("active");
          l.textContent = `○ ${findThemeDefinition(l.id).id.slice(0, 1)}`;
        } else {
          l.textContent = `● ${findThemeDefinition(l.id).id.slice(0, 1)}`;
        }
      });

      const theme = findThemeDefinition(themeValue.id);

      switchTheme(theme);
    });
  }
</script>
